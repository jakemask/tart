{"name":"Tartlet","tagline":"Taking the headache out of tar","body":"### What is it?\r\n\r\nTar horror stories. Everyone has one. You used the wrong flags and accidentally overwrote one of your source files without a backup. Or you extracted a tarball over your current directory and deleted half the updates to your project. You spent 30 minutes scouring Google for the right set of flags to extract a zipped tarball instead of an unzipped one. Why are there so many flags!?!\r\n\r\nEnter Tartlet. Tartlet is a small commandline wrapper around tar that handles the obnoxious flags for you. Need to extract an archive?\r\n\r\n    tartlet extract thinmints.tar.gz\r\n\r\nMmmmmmm. Delicious extracted cookies. Need to compress a set of files?\r\n\r\n    tartlet compress butter sugar flour --output cookie\r\n\r\nMmmmmmmmm. Chocolaty compressed cookies. Tartlet makes it easy to make archives (and apparently I'm craving cookies- please hold).\r\n\r\n### How to Use it\r\n\r\nTartlet takes a command and then a list of files, with optional flags thrown anywhere.\r\n\r\n#### Commands\r\n\r\n* `compress` - takes a list of files, and by default compresses them into gzipped tarball `archive.tar.gz`\r\n\r\n    ex:\r\n\r\n        $ tartlet compress foo bar baz\r\n\r\n    ***TODO***: do a clobbering check before making the tarball to ensure file safety\r\n\r\n* `extract` - takes a single zipped tarball and extracts it into the current directory\r\n\r\n    ex:\r\n\r\n        $ tartlet extract archive.tar.gz\r\n\r\n    ***TODO***: take a list of tarballs and extract them each into their own folder\r\n\r\n    ***TODO***: do a clobbering check before extracting the tarball to ensure file safety\r\n\r\n#### Options\r\n\r\nOptions can be placed anywhere in the command, eg. `tartlet -d compress -o target file1 file2` is the same as `tartlet compress file1 file2 -d -o target` which is the same as `tartlet compress -d file1 -o target file2`. I prefer to put -d before the command, -t after the command but before the files, and -o at the very end, but put them in whatever order makes sense to you.\r\n\r\n* `-o VALUE`, `--output VALUE` - instead of using the default output (archive.tar.gz or the current directory), direct output to **VALUE**. For compression archive name, tartlet will automatically append the proper file suffix (.tar or .tar.gz) if it is not already provided.\r\n\r\n    ex:\r\n\r\n        # extract contents of archive into folder 'dirname'\r\n        $ tartlet extract archive.tar.gz -o dirname\r\n\r\n        # compress list of files into tarball 'files.tar.gz'\r\n        $ tartlet compress foo bar baz -o files.tar.gz\r\n        -- or --\r\n        $ tartlet compress foo bar baz -o files\r\n\r\n* `--tarball`, `-tar`, or `-t` - treat tarball as not-gzipped, e.g. `archive.tar` (vs the default assumption of a gzipped tarball, eg `archive.tar.gz`\r\n\r\n    ex:\r\n\r\n        # extract contents of archive into current directory\r\n        $ tartlet extract --tarball archive.tar\r\n\r\n        # compress files into non-zipped tarball\r\n        $ tartlet compress --tarball foo bar baz\r\n\r\n* `--dry-run`, `--dry`, `-d` - don't execute any commands, simply print to stdout the tar command that would be produced by tartlet\r\n\r\n    ex:\r\n\r\n        $ tartlet --dry compress foo bar baz --tarball -o files\r\n        tar -cf files.tar foo bar baz\r\n\r\n        $ tartlet extract --dry-run lotsoffiles.tar.gz -o safefolder\r\n        tar -xzf lotsoffiles.tar.gz -C safefolder","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}