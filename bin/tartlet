#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'tartlet.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging

  COMMANDS = %w(compress extract)

  main do |command, *files| # Add args you want: |like,so|

    ##
    # Begin Execution
    case command

    ## Compress the list of files into the outfile
    when "compress"
      
      # When compressing, the -o option changed where the tarball goes
      outfile = options['output'].nil? ? Tartlet::OUTFILE : options['output']

      Tartlet::compressSingle(files,!options['tarball'],options['dry'],outfile)

    ## Extract the tarballs into their respective folders
    when "extract"

      # If we have several files, we need several tar commands (later)
      if files.length > 1
        
        help_now!("One file at a time, bub!")

      else
        # Simply extract the only file in the current directory
        target = options['output'].nil? ? Tartlet::TARGET : options['output']

        Tartlet::extractSingle(files[0],!options['tarball'],options['dry'],target)
      end
    else
      help_now!("#{command} is not a valid command. Must be one of {#{COMMANDS.join(",")}}")
    end


  end

  # supplemental methods here

  # Declare command-line interface here

  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Tartlet::VERSION

  description 'Wrapper for tar that provides sensible options'

  on("-o VALUE","--output","Output location if different than current directory");
  on("-t","--tar","--tarball","Do not gzip the tarball after compressing")
  on("-d","--dry","--dry-run","Do not execute any commands, simply output the commands that would be used.")

  arg :command, "Command to use (#{COMMANDS.join("|")})"

  arg :files, :many, "list of files to act on"

  use_log_level_option

  go!

end
